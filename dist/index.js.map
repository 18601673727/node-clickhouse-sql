{"version":3,"sources":["../src/index.js"],"names":["EQUALS","GREATER","GREATER_OR_EQUALS","LESS","LESS_OR_EQUALS","NOT_EQUALS","Consts","SQLObject","Conditions","args","arg","push","length","Disjunction","map","join","Conjunction","Condition","column","operator","value","quoteTerm","quoteVal","Negation","InclusionOperator","inclusionType","Array","isArray","val","In","NotIn","GlobalNotIn","GlobalIn","Operators","createCondition","Error","commonReplacer","s","Value","replace","Term","term","Number","isFinite","SQLFunction","name","_curry_f","AggregateFunctions","count","any","anyLast","min","max","sum","avg","uniq","uniqCombined","uniqHLL12","uniqExact","groupArray","groupUniqArray","ArithmeticFunctions","plus","minus","multiply","divide","intDiv","intDivOrZero","modulo","negate","abs","TimeFunctions","toYear","toMonth","toDayOfMonth","toDayOfWeek","toHour","toMinute","toTime","toDate","toStartOfDay","toStartOfMonth","toStartOfQuarter","toStartOfYear","toStartOfMinute","toStartOfFiveMinute","toStartOfHour","now","today","yesterday","IPAddrFunctions","toIPv4","toIPv6","IPv4NumToString","IPv4StringToNum","IPv4NumToStringClassC","IPv6NumToString","IPv6StringToNum","Raw","string","raw","Query","Select","tables","conditions","having_conditions","preconditions","aggregations","select_list","order_expressions","request_totals","sampling","undefined","limits","limitbycolumns","columns","forEach","col","table","Object","keys","values","condition","aggregateExpressions","a","number","offset","limit","expressions","e","c","from","prewhere","where","groupby","having","order_by","with_totals","sample","limitby","Queries","Utility","Dialect"],"mappings":"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","sourcesContent":["const EQUALS = \"=\";\nconst GREATER = \">\";\nconst GREATER_OR_EQUALS = \">=\";\nconst LESS = \"<\";\nconst LESS_OR_EQUALS = \"<=\";\nconst NOT_EQUALS = \"!=\";\n\nconst Consts = {\n  EQUALS,\n  GREATER,\n  GREATER_OR_EQUALS,\n  LESS,\n  LESS_OR_EQUALS,\n  NOT_EQUALS\n};\n\nclass SQLObject {\n}\n\nclass Conditions extends SQLObject {\n  constructor(...args) {\n    super();\n    this.args = args;\n  }\n\n  push(arg) {\n    this.args.push(arg);\n  }\n\n  get length() {\n    return this.args.length;\n  }\n}\n\nclass Disjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length ? this.args.map(arg => \"(\" + arg + \")\").join(\" or \") : \"\";\n  }\n}\n\nclass Conjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length\n      ? this.args.map(arg => \"(\" + arg + \")\").join(\" and \")\n      : \"\";\n  }\n\n}\n\nclass Condition extends SQLObject {\n  constructor(column, operator, value) {\n    super();\n    this.column = column;\n    this.operator = operator;\n    this.value = value;\n  }\n\n  toString() {\n    if (this.operator) {\n      return [quoteTerm(this.column), this.operator, quoteVal(this.value)].join(' ');\n    } else {\n      return this.column;\n    }\n  }\n}\n\nclass Negation extends Condition {\n  constructor(column, operator, value) {\n    super(column, operator, value);\n  }\n\n  toString() {\n    return \"not(\" + super.toString() + \")\";\n  }\n}\n\nclass InclusionOperator extends Condition {\n  constructor(inclusionType, column, operator, value) {\n    super(column, operator, value);\n    this.operator = inclusionType;\n  }\n\n  toString() {\n    return [\n      this.column,\n      this.operator,\n      \"(\",\n      Array.isArray(this.value)\n        ? this.value.map(val => quoteVal(val)).join(',')\n        : this.value,\n      \")\"\n    ].join('');\n  }\n}\n\nclass In extends InclusionOperator {\n  constructor(...args) {\n    super(\"in\", ...args);\n  }\n}\n\nclass NotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"not in\", ...args);\n  }\n}\n\nclass GlobalNotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global not in\", ...args);\n  }\n}\n\nclass GlobalIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global in\", ...args);\n  }\n}\n\nconst Operators = {\n  Conjunction, Disjunction, Negation,\n  In, NotIn, GlobalIn, GlobalNotIn\n};\n\nfunction createCondition(...args) {\n  switch (args.length) {\n    case 1:\n      return args[0] instanceof Condition ? args[0] : new Condition(args[0]);\n    case 2:\n      return new Condition(args[0], EQUALS, args[1]);\n    case 3:\n      return new Condition(...args);\n    default:\n      throw new Error(\"Invalid condition args: \", args);\n  }\n}\n\nlet commonReplacer = [\n  /[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, (s) => {\n    switch (s) {\n      case \"\\0\":\n        return \"\\\\0\";\n      case \"\\n\":\n        return \"\\\\n\";\n      case \"\\b\":\n        return \"\\\\b\";\n      case \"\\r\":\n        return \"\\\\r\";\n      case \"\\t\":\n        return \"\\\\t\";\n      case \"\\\\\":\n        return \"\\\\\\\\\";\n      case \"\\x1a\" :\n        return \"\\\\Z\";\n    }\n  }\n];\n\nclass Value extends SQLObject {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  toString() {\n    if (typeof this.value === \"string\") {\n      return \"'\" + this.value.replace(...commonReplacer).replace(/'/g, \"''\") + \"'\";\n    }\n    if (typeof this.value === 'undefined') {\n      return \"''\";\n    }\n\n    if (Array.isArray(this.value)) {\n      return this.value.map(val => new Value(val)).join();\n    }\n\n    return this.value + '';\n  }\n}\n\nclass Term extends SQLObject {\n  constructor(term) {\n    super();\n    this.term = term;\n  }\n\n  toString() {\n    return '`' + this.term.replace(...commonReplacer).replace(/`/g, '\\\\`') + '`';\n  }\n}\n\nfunction quoteVal(value) {\n  return value instanceof SQLObject ? value : new Value(value);\n}\n\nfunction quoteTerm(term) {\n  return term instanceof SQLObject || Number.isFinite(term) ? term : new Term(term);\n}\n\n\nclass SQLFunction extends SQLObject {\n  constructor(name, ...args) {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  toString() {\n    return this.name +\n      \"(\" +\n      this.args.map((arg) => arg instanceof SQLObject || Number.isFinite(arg) ? arg : quoteTerm(arg)).join() +\n      \")\";\n  }\n}\n\nconst _curry_f = (name) => {\n  return (...args) => new SQLFunction(name, ...args)\n};\n\nconst AggregateFunctions = {\n  count: _curry_f('count'),\n  any: _curry_f('any'),\n  anyLast: _curry_f('anyLast'),\n  min: _curry_f('min'),\n  max: _curry_f('max'),\n  sum: _curry_f('sum'),\n  avg: _curry_f('avg'),\n  uniq: _curry_f('uniq'),\n  uniqCombined: _curry_f('uniqCombined'),\n  uniqHLL12: _curry_f('uniqHLL12'),\n  uniqExact: _curry_f('uniqExact'),\n  groupArray: _curry_f('groupArray'),\n  groupUniqArray: _curry_f('groupUniqArray')\n};\n\nconst ArithmeticFunctions = {\n  plus: _curry_f('plus'),\n  minus: _curry_f('minus'),\n  multiply: _curry_f('multiply'),\n  divide: _curry_f('divide'),\n  intDiv: _curry_f('intDiv'),\n  intDivOrZero: _curry_f('intDivOrZero'),\n  modulo: _curry_f('modulo'),\n  negate: _curry_f('negate'),\n  abs: _curry_f('abs')\n};\n\nconst TimeFunctions = {\n  toYear: _curry_f('toYear'),\n  toMonth: _curry_f('toMonth'),\n  toDayOfMonth: _curry_f('toDayOfMonth'),\n  toDayOfWeek: _curry_f('toDayOfWeek'),\n  toHour: _curry_f('toHour'),\n  toMinute: _curry_f('toMinute'),\n  toTime: _curry_f('toTime'),\n  toDate: _curry_f('toDate'),\n  toStartOfDay: _curry_f('toStartOfDay'),\n  toStartOfMonth: _curry_f('toStartOfMonth'),\n  toStartOfQuarter: _curry_f('toStartOfQuarter'),\n  toStartOfYear: _curry_f('toStartOfYear'),\n  toStartOfMinute: _curry_f('toStartOfMinute'),\n  toStartOfFiveMinute: _curry_f('toStartOfFiveMinute'),\n  toStartOfHour: _curry_f('toStartOfHour'),\n\n  now: _curry_f('now'),\n  today: _curry_f('today'),\n  yesterday: _curry_f('yesterday')\n};\n\nconst IPAddrFunctions = {\n  toIPv4: _curry_f('toIPv4'),\n  toIPv6: _curry_f('toIPv6'),\n  IPv4NumToString: _curry_f('IPv4NumToString'),\n  IPv4StringToNum: _curry_f('IPv4StringToNum'),\n  IPv4NumToStringClassC: _curry_f('IPv4NumToStringClassC'),\n  IPv6NumToString: _curry_f('IPv6NumToString'),\n  IPv6StringToNum: _curry_f('IPv6StringToNum')\n};\n\nclass Raw extends SQLObject {\n  constructor(string) {\n    super();\n    this.raw = string;\n  }\n\n  toString() {\n    return this.raw;\n  }\n}\n\nclass Query extends SQLObject {\n}\n\nclass Select extends Query {\n  constructor() {\n    super();\n\n    this.tables = [];\n    this.conditions = new Conjunction();\n    this.having_conditions = new Conjunction();\n    this.preconditions = new Conjunction();\n    this.aggregations = [];\n    this.select_list = [];\n    this.order_expressions = [];\n    this.request_totals = [];\n    this.sampling = undefined;\n    this.limits = undefined;\n    this.limitbycolumns = undefined;\n\n  }\n\n  select(...columns) {\n    if (columns.length === 0) {\n      return this.select_list;\n    }\n\n    columns.forEach((col) => this.select_list.push(col));\n    return this;\n  }\n\n  /**\n   * @usage\n   *  q = selectBuilder->from('table0', ['table1', 'alias1'], { 'table2' : 'alias2'})->toString()\n   *  assertEquals(q, \"select * from table0, table1 as alias1, table2 as alias2\");\n   *\n   * @param tables\n   * @return {Select|Array}\n   */\n  from(...tables) {\n    if (!tables.length) {\n      return this.tables;\n    }\n\n    tables = tables.map(table => {\n      if (typeof table === \"string\") return [table, table];\n      if (Array.isArray(table)) return table;\n\n      return [Object.keys(table)[0], Object.values(table)[0]]\n    });\n\n    this.tables = tables;\n    return this;\n  }\n\n  prewhere(...args) {\n    this.preconditions.push(createCondition(...args));\n    return this;\n  }\n\n  orPrewhere(...args) {\n    let condition = createCondition(...args);\n    if (this.preconditions.length) {\n      this.preconditions = new Disjunction(this.preconditions, condition)\n    } else {\n      this.preconditions.push(condition)\n    }\n\n    return this;\n  }\n\n  where(...args) {\n    this.conditions.push(createCondition(...args));\n    return this;\n  }\n\n  orWhere(...args) {\n    let condition = createCondition(...args);\n    if (this.conditions.length) {\n      this.conditions = new Disjunction(this.conditions, condition)\n    } else {\n      this.conditions.push(condition);\n    }\n\n    return this;\n  }\n\n  groupBy(...aggregateExpressions) {\n    aggregateExpressions.forEach(a => this.aggregations.push(a));\n    return this;\n  }\n\n  withTotals(request_totals = true) {\n    this.request_totals = request_totals;\n    return this;\n  }\n\n  limit(number, offset) {\n    this.limits = {\n      number, offset\n    };\n    return this;\n  }\n\n  limitBy(limit, ...columns) {\n    this.limitbycolumns = {\n      limit, columns\n    };\n    return this;\n  }\n\n  orderBy(...expressions) {\n    expressions.forEach(e => this.order_expressions.push(e));\n    return this;\n  }\n\n  toString() {\n    let select_list;\n    if (this.select_list.length === 0) {\n      select_list = \"*\";\n    } else {\n      select_list = this.select_list.map(\n        c => Array.isArray(c)\n          ? quoteTerm(c[0]) + ' as ' + quoteTerm(c[1])\n          : quoteTerm(c)\n      ).join();\n    }\n\n\n    let from = this.from().map(\n      (table) =>\n        table[0] === table[1]\n          ? quoteTerm(table[0])\n          : quoteTerm(table[0]) + ' as ' + quoteTerm(table[1])\n    );\n    from = from.length ? \"from \" + from.join() : \"\";\n\n\n    let prewhere = this.preconditions.length ? \" prewhere \" + this.preconditions : \"\";\n    let where = this.conditions.length ? \" where \" + this.conditions : \"\";\n\n    let groupby = this.aggregations.length\n      ? \" group by \" + this.aggregations.map(c => quoteTerm(c)).join()\n      : \"\";\n\n    let having = this.having_conditions.length ? \" having \" + this.having_conditions : \"\";\n\n    let order_by = this.order_expressions.length\n      ? \"order by \" + this.order_expressions.map(e => Array.isArray(e) ? quoteTerm(e[0]) + \" \" + e[1] : quoteTerm(e)).join()\n      : \"\";\n\n\n    let with_totals = this.request_totals ? \" with totals \" : \"\";\n    let sample = this.sampling ? \" sample \" + this.sampling : \"\";\n\n    let limitby = this.limitbycolumns && this.limitbycolumns.columns.length\n      ? \" limit \" + this.limitbycolumns.limit + \" by \" + this.limitbycolumns.columns.map(c => quoteTerm(c)).join()\n      : '';\n\n    let limit = this.limits\n      ? \" limit \" + this.limits.number + (typeof this.limits.offset === \"undefined\" ? \"\" : \",\" + this.limits.offset)\n      : '';\n\n    return [\n      \"select \",\n      select_list,\n      from,\n      sample,\n      prewhere,\n      where,\n      groupby,\n      with_totals,\n      having,\n      order_by,\n      limitby,\n      limit\n    ].join(' ');\n\n  }\n}\n\n\nconst Queries = {\n  Select\n};\n\nconst Utility = {\n  quoteVal, val: quoteVal,\n  quoteTerm, term: quoteTerm,\n  raw: (s) => new Raw(s),\n\n};\n\n\nconst Dialect = {\n  ...Operators,\n  ...AggregateFunctions,\n  ...ArithmeticFunctions,\n  ...TimeFunctions,\n  ...IPAddrFunctions,\n  ...Consts,\n  ...Queries,\n  ...Utility\n};\nexport default Dialect;\n"],"file":"index.js"}