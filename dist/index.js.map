{"version":3,"sources":["../src/index.js"],"names":["EQUALS","GREATER","GREATER_OR_EQUALS","LESS","LESS_OR_EQUALS","NOT_EQUALS","Consts","SQLObject","Conditions","constructor","args","push","arg","length","Disjunction","toString","map","join","Conjunction","Condition","column","operator","value","quoteTerm","quoteVal","Negation","InclusionOperator","inclusionType","Array","isArray","val","In","NotIn","GlobalNotIn","GlobalIn","Operators","createCondition","Error","commonReplacer","s","Value","replace","Term","term","SQLFunction","name","_curry_f","AggregateFunctions","count","any","anyLast","min","max","sum","avg","uniq","uniqCombined","uniqHLL12","uniqExact","groupArray","groupUniqArray","ArithmeticFunctions","plus","minus","multiply","divide","intDiv","intDivOrZero","modulo","negate","abs","TimeFunctions","toYear","toMonth","toDayOfMonth","toDayOfWeek","toHour","toMinute","toTime","toStartOfDay","toStartOfMonth","toStartOfQuarter","toStartOfYear","toStartOfMinute","toStartOfFiveMinute","toStartOfHour","now","today","yesterday","Raw","string","raw","Query","Select","tables","conditions","having_conditions","preconditions","aggregations","select_list","order_expressions","request_totals","sampling","undefined","limits","limitbycolumns","select","columns","forEach","col","from","table","prewhere","orPrewhere","condition","where","orWhere","groupBy","aggregateExpressions","a","withTotals","limit","number","offset","limitBy","orderBy","expressions","e","c","groupby","having","order_by","with_totals","sample","limitby","Queries","Utility","Dialect"],"mappings":"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","file":"index.js","sourcesContent":["const EQUALS = \"=\";\nconst GREATER = \">\";\nconst GREATER_OR_EQUALS = \">=\";\nconst LESS = \"<\";\nconst LESS_OR_EQUALS = \"<=\";\nconst NOT_EQUALS = \"!=\";\n\nconst Consts = {\n  EQUALS,\n  GREATER,\n  GREATER_OR_EQUALS,\n  LESS,\n  LESS_OR_EQUALS,\n  NOT_EQUALS\n};\n\nclass SQLObject {\n}\n\nclass Conditions extends SQLObject {\n  constructor(...args) {\n    super();\n    this.args = args;\n  }\n\n  push(arg) {\n    this.args.push(arg);\n  }\n\n  get length() {\n    return this.args.length;\n  }\n}\n\nclass Disjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length ? this.args.map(arg => \"(\" + arg + \")\").join(\" or \") : \"\";\n  }\n}\n\nclass Conjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length\n      ? this.args.map(arg => \"(\" + arg + \")\").join(\" and \")\n      : \"\";\n  }\n\n}\n\nclass Condition extends SQLObject {\n  constructor(column, operator, value) {\n    super();\n    this.column = column;\n    this.operator = operator;\n    this.value = value;\n  }\n\n  toString() {\n    if (this.operator) {\n      return [quoteTerm(this.column), this.operator, quoteVal(this.value)].join(' ');\n    } else {\n      return this.column;\n    }\n  }\n}\n\nclass Negation extends Condition {\n  constructor(column, operator, value) {\n    super(column, operator, value);\n  }\n\n  toString() {\n    return \"not(\" + super.toString() + \")\";\n  }\n}\n\nclass InclusionOperator extends Condition {\n  constructor(inclusionType, column, operator, value) {\n    super(column, operator, value);\n    this.operator = inclusionType;\n  }\n\n  toString() {\n    return [\n      this.column,\n      this.operator,\n      \"(\",\n      Array.isArray(this.value)\n        ? this.value.map(val => quoteVal(val)).join(',')\n        : this.value,\n      \")\"\n    ].join('');\n  }\n}\n\nclass In extends InclusionOperator {\n  constructor(...args) {\n    super(\"in\", ...args);\n  }\n}\n\nclass NotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"not in\", ...args);\n  }\n}\n\nclass GlobalNotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global not in\", ...args);\n  }\n}\n\nclass GlobalIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global in\", ...args);\n  }\n}\n\nconst Operators = {\n  Conjunction, Disjunction, Negation,\n  In, NotIn, GlobalIn, GlobalNotIn\n};\n\nfunction createCondition(...args) {\n  switch (args.length) {\n    case 1:\n      return args[0] instanceof Condition ? args[0] : new Condition(args[0]);\n    case 2:\n      return new Condition(args[0], EQUALS, args[1]);\n    case 3:\n      return new Condition(...args);\n    default:\n      throw new Error(\"Invalid condition args: \", args);\n  }\n}\n\nlet commonReplacer = [\n  /[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, (s) => {\n    switch (s) {\n      case \"\\0\":\n        return \"\\\\0\";\n      case \"\\n\":\n        return \"\\\\n\";\n      case \"\\b\":\n        return \"\\\\b\";\n      case \"\\r\":\n        return \"\\\\r\";\n      case \"\\t\":\n        return \"\\\\t\";\n      case \"\\\\\":\n        return \"\\\\\\\\\";\n      case \"\\x1a\" :\n        return \"\\\\Z\";\n    }\n  }\n];\n\nclass Value extends SQLObject {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  toString() {\n    if (typeof this.value === \"string\") {\n      return \"'\" + this.value.replace(...commonReplacer).replace(/'/g, \"''\") + \"'\";\n    }\n    if (typeof this.value === 'undefined') {\n      return \"''\";\n    }\n\n    if (Array.isArray(this.value)) {\n      return this.value.map(val => new Value(val)).join();\n    }\n\n    return this.value + '';\n  }\n}\n\nclass Term extends SQLObject {\n  constructor(term) {\n    super();\n    this.term = term;\n  }\n\n  toString() {\n    return '`' + this.term.replace(...commonReplacer).replace(/`/g, '\\\\`') + '`';\n  }\n}\n\nfunction quoteVal(value) {\n  return value instanceof SQLObject ? value : new Value(value);\n}\n\nfunction quoteTerm(term) {\n  return term instanceof SQLObject || Number.isFinite(term) ? term : new Term(term);\n}\n\n\nclass SQLFunction extends SQLObject {\n  constructor(name, ...args) {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  toString() {\n    return this.name +\n      \"(\" +\n      this.args.map((arg) => arg instanceof SQLObject || Number.isFinite(arg) ? arg : quoteTerm(arg)).join() +\n      \")\";\n  }\n}\n\nconst _curry_f = (name) => {\n  return (...args) => new SQLFunction(name, ...args)\n};\n\nconst AggregateFunctions = {\n  count: _curry_f('count'),\n  any: _curry_f('any'),\n  anyLast: _curry_f('anyLast'),\n  min: _curry_f('min'),\n  max: _curry_f('max'),\n  sum: _curry_f('sum'),\n  avg: _curry_f('avg'),\n  uniq: _curry_f('uniq'),\n  uniqCombined: _curry_f('uniqCombined'),\n  uniqHLL12: _curry_f('uniqHLL12'),\n  uniqExact: _curry_f('uniqExect'),\n  groupArray: _curry_f('groupArray'),\n  groupUniqArray: _curry_f('groupUniqArray')\n};\n\nconst ArithmeticFunctions = {\n  plus: _curry_f('plus'),\n  minus: _curry_f('minus'),\n  multiply: _curry_f('multiply'),\n  divide: _curry_f('divide'),\n  intDiv: _curry_f('intDiv'),\n  intDivOrZero: _curry_f('intDivOrZero'),\n  modulo: _curry_f('modulo'),\n  negate: _curry_f('negate'),\n  abs: _curry_f('abs')\n};\n\nconst TimeFunctions = {\n  toYear: _curry_f('toYear'),\n  toMonth: _curry_f('toMonth'),\n  toDayOfMonth: _curry_f('toDayOfMonth'),\n  toDayOfWeek: _curry_f('toDayOfWeek'),\n  toHour: _curry_f('toHour'),\n  toMinute: _curry_f('toMinute'),\n  toTime: _curry_f('toTime'),\n\n  toStartOfDay: _curry_f('toStartOfDay'),\n  toStartOfMonth: _curry_f('toStartOfMonth'),\n  toStartOfQuarter: _curry_f('toStartOfQuarter'),\n  toStartOfYear: _curry_f('toStartOfYear'),\n  toStartOfMinute: _curry_f('toStartOfMinute'),\n  toStartOfFiveMinute: _curry_f('toStartOfFiveMinute'),\n  toStartOfHour: _curry_f('toStartOfHour'),\n\n  now: _curry_f('now'),\n  today: _curry_f('today'),\n  yesterday: _curry_f('yesterday')\n};\n\nclass Raw extends SQLObject {\n  constructor(string) {\n    super();\n    this.raw = string;\n  }\n\n  toString() {\n    return this.raw;\n  }\n}\n\nclass Query extends SQLObject {\n}\n\n\nclass Select extends Query {\n  constructor() {\n    super();\n\n    this.tables = [];\n    this.conditions = new Conjunction();\n    this.having_conditions = new Conjunction();\n    this.preconditions = new Conjunction();\n    this.aggregations = [];\n    this.select_list = [];\n    this.order_expressions = [];\n    this.request_totals = [];\n    this.sampling = undefined;\n    this.limits = undefined;\n    this.limitbycolumns = undefined;\n\n  }\n\n  select(...columns) {\n    if (columns.length === 0) {\n      return this.select_list;\n    }\n\n    columns.forEach((col) => this.select_list.push(col));\n    return this;\n  }\n\n  /**\n   * @usage\n   *  q = selectBuilder->from('table0')->from(['table1', 'alias1'])->from({ 'table2' : 'alias2'})->toString()\n   *  assertEquals(q, \"select * from table0, table1 as alias1, table2 as alias2\");\n   *\n   * @param tables\n   * @return {Select|Array}\n   */\n  from(...tables) {\n    if (!tables.length) {\n      return this.tables;\n    }\n\n    tables = tables.map(table => {\n      if (typeof table === \"string\") return [table, table];\n      if (Array.isArray(table)) return table;\n      return [Object.keys(table)[0], Object.values(table)[1]]\n    });\n\n    this.tables = tables;\n    return this;\n  }\n\n  prewhere(...args) {\n    this.preconditions.push(createCondition(...args));\n    return this;\n  }\n\n  orPrewhere(...args) {\n    let condition = createCondition(...args);\n    if (this.preconditions.length) {\n      this.preconditions = new Disjunction(this.preconditions, condition)\n    } else {\n      this.preconditions.push(condition)\n    }\n\n    return this;\n  }\n\n  where(...args) {\n    this.conditions.push(createCondition(...args));\n    return this;\n  }\n\n  orWhere(...args) {\n    let condition = createCondition(condition, operator, value);\n    if (this.conditions.length) {\n      this.conditions = new Disjunction(this.conditions, condition)\n    } else {\n      this.conditions.push(condition);\n    }\n\n    return this;\n  }\n\n  groupBy(...aggregateExpressions) {\n    aggregateExpressions.forEach(a => this.aggregations.push(a));\n    return this;\n  }\n\n  withTotals() {\n    this.request_totals = true;\n    return this;\n  }\n\n  limit(number, offset) {\n    this.limits = {\n      number, offset\n    };\n    return this;\n  }\n\n  limitBy(limit, ...columns) {\n    this.limitbycolumns = {\n      limit, columns\n    };\n    return this;\n  }\n\n  orderBy(...expressions) {\n    expressions.forEach(e => this.order_expressions.push(e));\n    return this;\n  }\n\n  toString() {\n    let select_list;\n    if (this.select_list.length === 0) {\n      select_list = \"*\";\n    } else {\n      select_list = this.select_list.map(\n        c => Array.isArray(c)\n          ? quoteTerm(c[0]) + ' as ' + quoteTerm(c[1])\n          : quoteTerm(c)\n      ).join();\n    }\n\n\n    let from = this.from().map(\n      (table) =>\n        table[0] === table[1]\n          ? quoteTerm(table[0])\n          : quoteTerm(table[0]) + ' as ' + quoteTerm(table[1])\n    );\n    from = from.length ? \"from \" + from.join() : \"\";\n\n\n    let prewhere = this.preconditions.length ? \" prewhere \" + this.preconditions : \"\";\n    let where = this.conditions.length ? \" where \" + this.conditions : \"\";\n\n    let groupby = this.aggregations.length\n      ? \" group by \" + this.aggregations.map(c => quoteTerm(c)).join()\n      : \"\";\n\n    let having = this.having_conditions.length ? \" having \" + this.having_conditions : \"\";\n\n    let order_by = this.order_expressions.length\n      ? \"order by \" + this.order_expressions.map(e => Array.isArray(e) ? quoteTerm(e[0]) + \" \" + e[1] : quoteTerm(e)).join()\n      : \"\";\n\n\n    let with_totals = this.request_totals ? \" with totals \" : \"\";\n    let sample = this.sampling ? \" sample \" + this.sampling : \"\";\n\n    let limitby = this.limitbycolumns && this.limitbycolumns.columns.length\n      ? \" limit \" + this.limitbycolumns.limit + \" by \" + this.limitbycolumns.columns.map(c => quoteTerm(c)).join()\n      : '';\n\n    let limit = this.limits\n      ? \" limit \" + this.limits.number + (typeof this.limits.offset === \"undefined\" ? \"\" : \",\" + this.limits.offset)\n      : '';\n\n    return [\n      \"select \",\n      select_list,\n      from,\n      sample,\n      prewhere,\n      where,\n      groupby,\n      with_totals,\n      having,\n      order_by,\n      limitby,\n      limit\n    ].join(' ');\n\n  }\n}\n\n\nconst Queries = {\n  Select\n};\n\nconst Utility = {\n  quoteVal, val: quoteVal,\n  quoteTerm, term: quoteTerm,\n  raw: (s) => new Raw(s),\n\n};\n\n\nconst Dialect = {\n  ...Operators,\n  ...AggregateFunctions,\n  ...ArithmeticFunctions,\n  ...TimeFunctions,\n  ...Consts,\n  ...Queries,\n  ...Utility\n};\nexport default Dialect;\n"]}