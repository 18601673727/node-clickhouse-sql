{"version":3,"sources":["../src/index.js"],"names":["EQUALS","GREATER","GREATER_OR_EQUALS","LESS","LESS_OR_EQUALS","NOT_EQUALS","Consts","SQLObject","Conditions","args","arg","push","length","Disjunction","map","join","Conjunction","Condition","column","operator","value","quoteTerm","quoteVal","Negation","InclusionOperator","inclusionType","Array","isArray","val","In","NotIn","GlobalNotIn","GlobalIn","Operators","createCondition","Error","commonReplacer","s","Value","replace","Term","term","SQLFunction","name","_curry_f","AggregateFunctions","count","any","anyLast","min","max","sum","avg","uniq","uniqCombined","uniqHLL12","uniqExact","groupArray","groupUniqArray","ArithmeticFunctions","plus","minus","multiply","divide","intDiv","intDivOrZero","modulo","negate","abs","TimeFunctions","toYear","toMonth","toDayOfMonth","toDayOfWeek","toHour","toMinute","toTime","toStartOfDay","toStartOfMonth","toStartOfQuarter","toStartOfYear","toStartOfMinute","toStartOfFiveMinute","toStartOfHour","now","today","yesterday","Raw","string","raw","Query","Select","tables","conditions","having_conditions","preconditions","aggregations","select_list","order_expressions","request_totals","sampling","undefined","limits","limitbycolumns","columns","forEach","col","table","condition","aggregateExpressions","a","number","offset","limit","expressions","e","c","from","prewhere","where","groupby","having","order_by","with_totals","sample","limitby","Queries","Utility","Dialect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAf;AACA,IAAMC,UAAU,GAAhB;AACA,IAAMC,oBAAoB,IAA1B;AACA,IAAMC,OAAO,GAAb;AACA,IAAMC,iBAAiB,IAAvB;AACA,IAAMC,aAAa,IAAnB;AAEA,IAAMC,SAAS;AACbN,gBADa;AAEbC,kBAFa;AAGbC,sCAHa;AAIbC,YAJa;AAKbC,gCALa;AAMbC;AANa,CAAf;;IASME,S;;;;IAGAC,U;;;;;AACJ,wBAAqB;AAAA;;AAAA;AACnB;;AADmB,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAEnB,UAAKA,IAAL,GAAYA,IAAZ;AAFmB;AAGpB;;;;yBAEIC,G,EAAK;AACR,WAAKD,IAAL,CAAUE,IAAV,CAAeD,GAAf;AACD;;;wBAEY;AACX,aAAO,KAAKD,IAAL,CAAUG,MAAjB;AACD;;;EAZsBL,S;;IAenBM,W;;;;;AACJ,yBAAqB;AAAA;;AAAA;;AAAA,uCAANJ,IAAM;AAANA,UAAM;AAAA;;AAAA,qKACVA,IADU;AAEpB;;;;+BAEU;AACT,aAAO,KAAKA,IAAL,CAAUG,MAAV,GAAmB,KAAKH,IAAL,CAAUK,GAAV,CAAc;AAAA,eAAO,MAAMJ,GAAN,GAAY,GAAnB;AAAA,OAAd,EAAsCK,IAAtC,CAA2C,MAA3C,CAAnB,GAAwE,EAA/E;AACD;;;EAPuBP,U;;IAUpBQ,W;;;;;AACJ,yBAAqB;AAAA;;AAAA;;AAAA,uCAANP,IAAM;AAANA,UAAM;AAAA;;AAAA,uKACVA,IADU;AAEpB;;;;+BAEU;AACT,aAAO,KAAKA,IAAL,CAAUG,MAAV,GACH,KAAKH,IAAL,CAAUK,GAAV,CAAc;AAAA,eAAO,MAAMJ,GAAN,GAAY,GAAnB;AAAA,OAAd,EAAsCK,IAAtC,CAA2C,OAA3C,CADG,GAEH,EAFJ;AAGD;;;EATuBP,U;;IAapBS,S;;;;;AACJ,qBAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;AAAA;;AAAA;AACnC;AACA,WAAKF,MAAL,GAAcA,MAAd;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AACA,WAAKC,KAAL,GAAaA,KAAb;AAJmC;AAKpC;;;;+BAEU;AACT,UAAI,KAAKD,QAAT,EAAmB;AACjB,eAAO,CAACE,UAAU,KAAKH,MAAf,CAAD,EAAyB,KAAKC,QAA9B,EAAwCG,SAAS,KAAKF,KAAd,CAAxC,EAA8DL,IAA9D,CAAmE,GAAnE,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKG,MAAZ;AACD;AACF;;;EAdqBX,S;;IAiBlBgB,Q;;;;;AACJ,oBAAYL,MAAZ,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;AAAA;AAAA,oIAC7BF,MAD6B,EACrBC,QADqB,EACXC,KADW;AAEpC;;;;+BAEU;AACT,aAAO,6IAA4B,GAAnC;AACD;;;EAPoBH,S;;IAUjBO,iB;;;;;AACJ,6BAAYC,aAAZ,EAA2BP,MAA3B,EAAmCC,QAAnC,EAA6CC,KAA7C,EAAoD;AAAA;;AAAA;AAClD,wJAAMF,MAAN,EAAcC,QAAd,EAAwBC,KAAxB;AACA,WAAKD,QAAL,GAAgBM,aAAhB;AAFkD;AAGnD;;;;+BAEU;AACT,aAAO,CACL,KAAKP,MADA,EAEL,KAAKC,QAFA,EAGL,GAHK,EAILO,MAAMC,OAAN,CAAc,KAAKP,KAAnB,IACI,KAAKA,KAAL,CAAWN,GAAX,CAAe;AAAA,eAAOQ,SAASM,GAAT,CAAP;AAAA,OAAf,EAAqCb,IAArC,CAA0C,GAA1C,CADJ,GAEI,KAAKK,KANJ,EAOL,GAPK,EAQLL,IARK,CAQA,EARA,CAAP;AASD;;;EAhB6BE,S;;IAmB1BY,E;;;;;AACJ,gBAAqB;AAAA;;AAAA;;AAAA,uCAANpB,IAAM;AAANA,UAAM;AAAA;;AAAA,8IACb,IADa,SACJA,IADI;AAEpB;;;EAHce,iB;;IAMXM,K;;;;;AACJ,mBAAqB;AAAA;;AAAA;;AAAA,uCAANrB,IAAM;AAANA,UAAM;AAAA;;AAAA,oJACb,QADa,SACAA,IADA;AAEpB;;;EAHiBe,iB;;IAMdO,W;;;;;AACJ,yBAAqB;AAAA;;AAAA;;AAAA,uCAANtB,IAAM;AAANA,UAAM;AAAA;;AAAA,gKACb,eADa,SACOA,IADP;AAEpB;;;EAHuBe,iB;;IAMpBQ,Q;;;;;AACJ,sBAAqB;AAAA;;AAAA;;AAAA,uCAANvB,IAAM;AAANA,UAAM;AAAA;;AAAA,0JACb,WADa,SACGA,IADH;AAEpB;;;EAHoBe,iB;;AAMvB,IAAMS,YAAY;AAChBjB,0BADgB;AACHH,0BADG;AACUU,oBADV;AAEhBM,QAFgB;AAEZC,cAFY;AAELE,oBAFK;AAEKD;AAFL,CAAlB;;AAKA,SAASG,eAAT,GAAkC;AAAA,qCAANzB,IAAM;AAANA,QAAM;AAAA;;AAChC,UAAQA,KAAKG,MAAb;AACE,SAAK,CAAL;AACE,aAAOH,KAAK,CAAL,aAAmBQ,SAAnB,GAA+BR,KAAK,CAAL,CAA/B,GAAyC,IAAIQ,SAAJ,CAAcR,KAAK,CAAL,CAAd,CAAhD;;AACF,SAAK,CAAL;AACE,aAAO,IAAIQ,SAAJ,CAAcR,KAAK,CAAL,CAAd,EAAuBT,MAAvB,EAA+BS,KAAK,CAAL,CAA/B,CAAP;;AACF,SAAK,CAAL;AACE,gDAAWQ,SAAX,gBAAwBR,IAAxB;;AACF;AACE,YAAM,IAAI0B,KAAJ,CAAU,0BAAV,EAAsC1B,IAAtC,CAAN;AARJ;AAUD;;AAED,IAAI2B,iBAAiB,CACnB,uBADmB,EACM,UAACC,CAAD,EAAO;AAC9B,UAAQA,CAAR;AACE,SAAK,IAAL;AACE,aAAO,KAAP;;AACF,SAAK,IAAL;AACE,aAAO,KAAP;;AACF,SAAK,IAAL;AACE,aAAO,KAAP;;AACF,SAAK,IAAL;AACE,aAAO,KAAP;;AACF,SAAK,IAAL;AACE,aAAO,KAAP;;AACF,SAAK,IAAL;AACE,aAAO,MAAP;;AACF,SAAK,MAAL;AACE,aAAO,KAAP;AAdJ;AAgBD,CAlBkB,CAArB;;IAqBMC,K;;;;;AACJ,iBAAYlB,KAAZ,EAAmB;AAAA;;AAAA;AACjB;AACA,WAAKA,KAAL,GAAaA,KAAb;AAFiB;AAGlB;;;;+BAEU;AACT,UAAI,OAAO,KAAKA,KAAZ,KAAsB,QAA1B,EAAoC;AAAA;;AAClC,eAAO,MAAM,eAAKA,KAAL,EAAWmB,OAAX,eAAsBH,cAAtB,EAAsCG,OAAtC,CAA8C,IAA9C,EAAoD,IAApD,CAAN,GAAkE,GAAzE;AACD;;AACD,UAAI,OAAO,KAAKnB,KAAZ,KAAsB,WAA1B,EAAuC;AACrC,eAAO,IAAP;AACD;;AAED,UAAIM,MAAMC,OAAN,CAAc,KAAKP,KAAnB,CAAJ,EAA+B;AAC7B,eAAO,KAAKA,KAAL,CAAWN,GAAX,CAAe;AAAA,iBAAO,IAAIwB,KAAJ,CAAUV,GAAV,CAAP;AAAA,SAAf,EAAsCb,IAAtC,EAAP;AACD;;AAED,aAAO,KAAKK,KAAL,GAAa,EAApB;AACD;;;EAnBiBb,S;;IAsBdiC,I;;;;;AACJ,gBAAYC,IAAZ,EAAkB;AAAA;;AAAA;AAChB;AACA,WAAKA,IAAL,GAAYA,IAAZ;AAFgB;AAGjB;;;;+BAEU;AAAA;;AACT,aAAO,MAAM,cAAKA,IAAL,EAAUF,OAAV,cAAqBH,cAArB,EAAqCG,OAArC,CAA6C,IAA7C,EAAmD,KAAnD,CAAN,GAAkE,GAAzE;AACD;;;EARgBhC,S;;AAWnB,SAASe,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,SAAOA,iBAAiBb,SAAjB,GAA6Ba,KAA7B,GAAqC,IAAIkB,KAAJ,CAAUlB,KAAV,CAA5C;AACD;;AAED,SAASC,SAAT,CAAmBoB,IAAnB,EAAyB;AACvB,SAAOA,gBAAgBlC,SAAhB,IAA6B,uBAAgBkC,IAAhB,CAA7B,GAAqDA,IAArD,GAA4D,IAAID,IAAJ,CAASC,IAAT,CAAnE;AACD;;IAGKC,W;;;;;AACJ,uBAAYC,IAAZ,EAA2B;AAAA;;AAAA;AACzB;AACA,WAAKA,IAAL,GAAYA,IAAZ;;AAFyB,uCAANlC,IAAM;AAANA,UAAM;AAAA;;AAGzB,WAAKA,IAAL,GAAYA,IAAZ;AAHyB;AAI1B;;;;+BAEU;AACT,aAAO,KAAKkC,IAAL,GACL,GADK,GAEL,KAAKlC,IAAL,CAAUK,GAAV,CAAc,UAACJ,GAAD;AAAA,eAASA,eAAeH,SAAf,IAA4B,uBAAgBG,GAAhB,CAA5B,GAAmDA,GAAnD,GAAyDW,UAAUX,GAAV,CAAlE;AAAA,OAAd,EAAgGK,IAAhG,EAFK,GAGL,GAHF;AAID;;;EAZuBR,S;;AAe1B,IAAMqC,WAAW,SAAXA,QAAW,CAACD,IAAD,EAAU;AACzB,SAAO;AAAA,wCAAIlC,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,8CAAiBiC,WAAjB,iBAA6BC,IAA7B,GAAsClC,IAAtC;AAAA,GAAP;AACD,CAFD;;AAIA,IAAMoC,qBAAqB;AACzBC,SAAOF,SAAS,OAAT,CADkB;AAEzBG,OAAKH,SAAS,KAAT,CAFoB;AAGzBI,WAASJ,SAAS,SAAT,CAHgB;AAIzBK,OAAKL,SAAS,KAAT,CAJoB;AAKzBM,OAAKN,SAAS,KAAT,CALoB;AAMzBO,OAAKP,SAAS,KAAT,CANoB;AAOzBQ,OAAKR,SAAS,KAAT,CAPoB;AAQzBS,QAAMT,SAAS,MAAT,CARmB;AASzBU,gBAAcV,SAAS,cAAT,CATW;AAUzBW,aAAWX,SAAS,WAAT,CAVc;AAWzBY,aAAWZ,SAAS,WAAT,CAXc;AAYzBa,cAAYb,SAAS,YAAT,CAZa;AAazBc,kBAAgBd,SAAS,gBAAT;AAbS,CAA3B;AAgBA,IAAMe,sBAAsB;AAC1BC,QAAMhB,SAAS,MAAT,CADoB;AAE1BiB,SAAOjB,SAAS,OAAT,CAFmB;AAG1BkB,YAAUlB,SAAS,UAAT,CAHgB;AAI1BmB,UAAQnB,SAAS,QAAT,CAJkB;AAK1BoB,UAAQpB,SAAS,QAAT,CALkB;AAM1BqB,gBAAcrB,SAAS,cAAT,CANY;AAO1BsB,UAAQtB,SAAS,QAAT,CAPkB;AAQ1BuB,UAAQvB,SAAS,QAAT,CARkB;AAS1BwB,OAAKxB,SAAS,KAAT;AATqB,CAA5B;AAYA,IAAMyB,gBAAgB;AACpBC,UAAQ1B,SAAS,QAAT,CADY;AAEpB2B,WAAS3B,SAAS,SAAT,CAFW;AAGpB4B,gBAAc5B,SAAS,cAAT,CAHM;AAIpB6B,eAAa7B,SAAS,aAAT,CAJO;AAKpB8B,UAAQ9B,SAAS,QAAT,CALY;AAMpB+B,YAAU/B,SAAS,UAAT,CANU;AAOpBgC,UAAQhC,SAAS,QAAT,CAPY;AASpBiC,gBAAcjC,SAAS,cAAT,CATM;AAUpBkC,kBAAgBlC,SAAS,gBAAT,CAVI;AAWpBmC,oBAAkBnC,SAAS,kBAAT,CAXE;AAYpBoC,iBAAepC,SAAS,eAAT,CAZK;AAapBqC,mBAAiBrC,SAAS,iBAAT,CAbG;AAcpBsC,uBAAqBtC,SAAS,qBAAT,CAdD;AAepBuC,iBAAevC,SAAS,eAAT,CAfK;AAiBpBwC,OAAKxC,SAAS,KAAT,CAjBe;AAkBpByC,SAAOzC,SAAS,OAAT,CAlBa;AAmBpB0C,aAAW1C,SAAS,WAAT;AAnBS,CAAtB;;IAsBM2C,G;;;;;AACJ,eAAYC,MAAZ,EAAoB;AAAA;;AAAA;AAClB;AACA,WAAKC,GAAL,GAAWD,MAAX;AAFkB;AAGnB;;;;+BAEU;AACT,aAAO,KAAKC,GAAZ;AACD;;;EARelF,S;;IAWZmF,K;;;;;;;;;;;EAAcnF,S;;IAIdoF,M;;;;;AACJ,oBAAc;AAAA;;AAAA;AACZ;AAEA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,UAAL,GAAkB,IAAI7E,WAAJ,EAAlB;AACA,WAAK8E,iBAAL,GAAyB,IAAI9E,WAAJ,EAAzB;AACA,WAAK+E,aAAL,GAAqB,IAAI/E,WAAJ,EAArB;AACA,WAAKgF,YAAL,GAAoB,EAApB;AACA,WAAKC,WAAL,GAAmB,EAAnB;AACA,WAAKC,iBAAL,GAAyB,EAAzB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,WAAKC,QAAL,GAAgBC,SAAhB;AACA,WAAKC,MAAL,GAAcD,SAAd;AACA,WAAKE,cAAL,GAAsBF,SAAtB;AAbY;AAeb;;;;6BAEkB;AAAA;;AAAA,0CAATG,OAAS;AAATA,eAAS;AAAA;;AACjB,UAAIA,QAAQ5F,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAO,KAAKqF,WAAZ;AACD;;AAEDO,cAAQC,OAAR,CAAgB,UAACC,GAAD;AAAA,eAAS,OAAKT,WAAL,CAAiBtF,IAAjB,CAAsB+F,GAAtB,CAAT;AAAA,OAAhB;AACA,aAAO,IAAP;AACD;AAED;;;;;;;;;;;2BAQgB;AAAA,0CAARd,MAAQ;AAARA,cAAQ;AAAA;;AACd,UAAI,CAACA,OAAOhF,MAAZ,EAAoB;AAClB,eAAO,KAAKgF,MAAZ;AACD;;AAEDA,eAASA,OAAO9E,GAAP,CAAW,iBAAS;AAC3B,YAAI,OAAO6F,KAAP,KAAiB,QAArB,EAA+B,OAAO,CAACA,KAAD,EAAQA,KAAR,CAAP;AAC/B,YAAIjF,MAAMC,OAAN,CAAcgF,KAAd,CAAJ,EAA0B,OAAOA,KAAP;AAC1B,eAAO,CAAC,mBAAYA,KAAZ,EAAmB,CAAnB,CAAD,EAAwB,qBAAcA,KAAd,EAAqB,CAArB,CAAxB,CAAP;AACD,OAJQ,CAAT;AAMA,WAAKf,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACD;;;+BAEiB;AAChB,WAAKG,aAAL,CAAmBpF,IAAnB,CAAwBuB,wCAAxB;AACA,aAAO,IAAP;AACD;;;iCAEmB;AAClB,UAAI0E,YAAY1E,wCAAhB;;AACA,UAAI,KAAK6D,aAAL,CAAmBnF,MAAvB,EAA+B;AAC7B,aAAKmF,aAAL,GAAqB,IAAIlF,WAAJ,CAAgB,KAAKkF,aAArB,EAAoCa,SAApC,CAArB;AACD,OAFD,MAEO;AACL,aAAKb,aAAL,CAAmBpF,IAAnB,CAAwBiG,SAAxB;AACD;;AAED,aAAO,IAAP;AACD;;;4BAEc;AACb,WAAKf,UAAL,CAAgBlF,IAAhB,CAAqBuB,wCAArB;AACA,aAAO,IAAP;AACD;;;8BAEgB;AACf,UAAI0E,YAAY1E,gBAAgB0E,SAAhB,EAA2BzF,QAA3B,EAAqCC,KAArC,CAAhB;;AACA,UAAI,KAAKyE,UAAL,CAAgBjF,MAApB,EAA4B;AAC1B,aAAKiF,UAAL,GAAkB,IAAIhF,WAAJ,CAAgB,KAAKgF,UAArB,EAAiCe,SAAjC,CAAlB;AACD,OAFD,MAEO;AACL,aAAKf,UAAL,CAAgBlF,IAAhB,CAAqBiG,SAArB;AACD;;AAED,aAAO,IAAP;AACD;;;8BAEgC;AAAA;;AAAA,0CAAtBC,oBAAsB;AAAtBA,4BAAsB;AAAA;;AAC/BA,2BAAqBJ,OAArB,CAA6B;AAAA,eAAK,QAAKT,YAAL,CAAkBrF,IAAlB,CAAuBmG,CAAvB,CAAL;AAAA,OAA7B;AACA,aAAO,IAAP;AACD;;;iCAEY;AACX,WAAKX,cAAL,GAAsB,IAAtB;AACA,aAAO,IAAP;AACD;;;0BAEKY,M,EAAQC,M,EAAQ;AACpB,WAAKV,MAAL,GAAc;AACZS,sBADY;AACJC;AADI,OAAd;AAGA,aAAO,IAAP;AACD;;;4BAEOC,K,EAAmB;AAAA,0CAATT,OAAS;AAATA,eAAS;AAAA;;AACzB,WAAKD,cAAL,GAAsB;AACpBU,oBADoB;AACbT;AADa,OAAtB;AAGA,aAAO,IAAP;AACD;;;8BAEuB;AAAA;;AAAA,0CAAbU,WAAa;AAAbA,mBAAa;AAAA;;AACtBA,kBAAYT,OAAZ,CAAoB;AAAA,eAAK,QAAKP,iBAAL,CAAuBvF,IAAvB,CAA4BwG,CAA5B,CAAL;AAAA,OAApB;AACA,aAAO,IAAP;AACD;;;+BAEU;AACT,UAAIlB,WAAJ;;AACA,UAAI,KAAKA,WAAL,CAAiBrF,MAAjB,KAA4B,CAAhC,EAAmC;AACjCqF,sBAAc,GAAd;AACD,OAFD,MAEO;AACLA,sBAAc,KAAKA,WAAL,CAAiBnF,GAAjB,CACZ;AAAA,iBAAKY,MAAMC,OAAN,CAAcyF,CAAd,IACD/F,UAAU+F,EAAE,CAAF,CAAV,IAAkB,MAAlB,GAA2B/F,UAAU+F,EAAE,CAAF,CAAV,CAD1B,GAED/F,UAAU+F,CAAV,CAFJ;AAAA,SADY,EAIZrG,IAJY,EAAd;AAKD;;AAGD,UAAIsG,OAAO,KAAKA,IAAL,GAAYvG,GAAZ,CACT,UAAC6F,KAAD;AAAA,eACEA,MAAM,CAAN,MAAaA,MAAM,CAAN,CAAb,GACItF,UAAUsF,MAAM,CAAN,CAAV,CADJ,GAEItF,UAAUsF,MAAM,CAAN,CAAV,IAAsB,MAAtB,GAA+BtF,UAAUsF,MAAM,CAAN,CAAV,CAHrC;AAAA,OADS,CAAX;AAMAU,aAAOA,KAAKzG,MAAL,GAAc,UAAUyG,KAAKtG,IAAL,EAAxB,GAAsC,EAA7C;AAGA,UAAIuG,WAAW,KAAKvB,aAAL,CAAmBnF,MAAnB,GAA4B,eAAe,KAAKmF,aAAhD,GAAgE,EAA/E;AACA,UAAIwB,QAAQ,KAAK1B,UAAL,CAAgBjF,MAAhB,GAAyB,YAAY,KAAKiF,UAA1C,GAAuD,EAAnE;AAEA,UAAI2B,UAAU,KAAKxB,YAAL,CAAkBpF,MAAlB,GACV,eAAe,KAAKoF,YAAL,CAAkBlF,GAAlB,CAAsB;AAAA,eAAKO,UAAU+F,CAAV,CAAL;AAAA,OAAtB,EAAyCrG,IAAzC,EADL,GAEV,EAFJ;AAIA,UAAI0G,SAAS,KAAK3B,iBAAL,CAAuBlF,MAAvB,GAAgC,aAAa,KAAKkF,iBAAlD,GAAsE,EAAnF;AAEA,UAAI4B,WAAW,KAAKxB,iBAAL,CAAuBtF,MAAvB,GACX,cAAc,KAAKsF,iBAAL,CAAuBpF,GAAvB,CAA2B;AAAA,eAAKY,MAAMC,OAAN,CAAcwF,CAAd,IAAmB9F,UAAU8F,EAAE,CAAF,CAAV,IAAkB,GAAlB,GAAwBA,EAAE,CAAF,CAA3C,GAAkD9F,UAAU8F,CAAV,CAAvD;AAAA,OAA3B,EAAgGpG,IAAhG,EADH,GAEX,EAFJ;AAKA,UAAI4G,cAAc,KAAKxB,cAAL,GAAsB,eAAtB,GAAwC,EAA1D;AACA,UAAIyB,SAAS,KAAKxB,QAAL,GAAgB,aAAa,KAAKA,QAAlC,GAA6C,EAA1D;AAEA,UAAIyB,UAAU,KAAKtB,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,OAApB,CAA4B5F,MAAnD,GACV,YAAY,KAAK2F,cAAL,CAAoBU,KAAhC,GAAwC,MAAxC,GAAiD,KAAKV,cAAL,CAAoBC,OAApB,CAA4B1F,GAA5B,CAAgC;AAAA,eAAKO,UAAU+F,CAAV,CAAL;AAAA,OAAhC,EAAmDrG,IAAnD,EADvC,GAEV,EAFJ;AAIA,UAAIkG,QAAQ,KAAKX,MAAL,GACR,YAAY,KAAKA,MAAL,CAAYS,MAAxB,IAAkC,OAAO,KAAKT,MAAL,CAAYU,MAAnB,KAA8B,WAA9B,GAA4C,EAA5C,GAAiD,MAAM,KAAKV,MAAL,CAAYU,MAArG,CADQ,GAER,EAFJ;AAIA,aAAO,CACL,SADK,EAELf,WAFK,EAGLoB,IAHK,EAILO,MAJK,EAKLN,QALK,EAMLC,KANK,EAOLC,OAPK,EAQLG,WARK,EASLF,MATK,EAULC,QAVK,EAWLG,OAXK,EAYLZ,KAZK,EAaLlG,IAbK,CAaA,GAbA,CAAP;AAeD;;;EA7KkB2E,K;;AAiLrB,IAAMoC,UAAU;AACdnC;AADc,CAAhB;AAIA,IAAMoC,UAAU;AACdzG,oBADc;AACJM,OAAKN,QADD;AAEdD,sBAFc;AAEHoB,QAAMpB,SAFH;AAGdoE,OAAK,aAACpD,CAAD;AAAA,WAAO,IAAIkD,GAAJ,CAAQlD,CAAR,CAAP;AAAA;AAHS,CAAhB;AAQA,IAAM2F,qCACD/F,SADC,EAEDY,kBAFC,EAGDc,mBAHC,EAIDU,aAJC,EAKD/D,MALC,EAMDwH,OANC,EAODC,OAPC,CAAN;eASeC,O","file":"index.js","sourcesContent":["const EQUALS = \"=\";\nconst GREATER = \">\";\nconst GREATER_OR_EQUALS = \">=\";\nconst LESS = \"<\";\nconst LESS_OR_EQUALS = \"<=\";\nconst NOT_EQUALS = \"!=\";\n\nconst Consts = {\n  EQUALS,\n  GREATER,\n  GREATER_OR_EQUALS,\n  LESS,\n  LESS_OR_EQUALS,\n  NOT_EQUALS\n};\n\nclass SQLObject {\n}\n\nclass Conditions extends SQLObject {\n  constructor(...args) {\n    super();\n    this.args = args;\n  }\n\n  push(arg) {\n    this.args.push(arg);\n  }\n\n  get length() {\n    return this.args.length;\n  }\n}\n\nclass Disjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length ? this.args.map(arg => \"(\" + arg + \")\").join(\" or \") : \"\";\n  }\n}\n\nclass Conjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length\n      ? this.args.map(arg => \"(\" + arg + \")\").join(\" and \")\n      : \"\";\n  }\n\n}\n\nclass Condition extends SQLObject {\n  constructor(column, operator, value) {\n    super();\n    this.column = column;\n    this.operator = operator;\n    this.value = value;\n  }\n\n  toString() {\n    if (this.operator) {\n      return [quoteTerm(this.column), this.operator, quoteVal(this.value)].join(' ');\n    } else {\n      return this.column;\n    }\n  }\n}\n\nclass Negation extends Condition {\n  constructor(column, operator, value) {\n    super(column, operator, value);\n  }\n\n  toString() {\n    return \"not(\" + super.toString() + \")\";\n  }\n}\n\nclass InclusionOperator extends Condition {\n  constructor(inclusionType, column, operator, value) {\n    super(column, operator, value);\n    this.operator = inclusionType;\n  }\n\n  toString() {\n    return [\n      this.column,\n      this.operator,\n      \"(\",\n      Array.isArray(this.value)\n        ? this.value.map(val => quoteVal(val)).join(',')\n        : this.value,\n      \")\"\n    ].join('');\n  }\n}\n\nclass In extends InclusionOperator {\n  constructor(...args) {\n    super(\"in\", ...args);\n  }\n}\n\nclass NotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"not in\", ...args);\n  }\n}\n\nclass GlobalNotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global not in\", ...args);\n  }\n}\n\nclass GlobalIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global in\", ...args);\n  }\n}\n\nconst Operators = {\n  Conjunction, Disjunction, Negation,\n  In, NotIn, GlobalIn, GlobalNotIn\n};\n\nfunction createCondition(...args) {\n  switch (args.length) {\n    case 1:\n      return args[0] instanceof Condition ? args[0] : new Condition(args[0]);\n    case 2:\n      return new Condition(args[0], EQUALS, args[1]);\n    case 3:\n      return new Condition(...args);\n    default:\n      throw new Error(\"Invalid condition args: \", args);\n  }\n}\n\nlet commonReplacer = [\n  /[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, (s) => {\n    switch (s) {\n      case \"\\0\":\n        return \"\\\\0\";\n      case \"\\n\":\n        return \"\\\\n\";\n      case \"\\b\":\n        return \"\\\\b\";\n      case \"\\r\":\n        return \"\\\\r\";\n      case \"\\t\":\n        return \"\\\\t\";\n      case \"\\\\\":\n        return \"\\\\\\\\\";\n      case \"\\x1a\" :\n        return \"\\\\Z\";\n    }\n  }\n];\n\nclass Value extends SQLObject {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  toString() {\n    if (typeof this.value === \"string\") {\n      return \"'\" + this.value.replace(...commonReplacer).replace(/'/g, \"''\") + \"'\";\n    }\n    if (typeof this.value === 'undefined') {\n      return \"''\";\n    }\n\n    if (Array.isArray(this.value)) {\n      return this.value.map(val => new Value(val)).join();\n    }\n\n    return this.value + '';\n  }\n}\n\nclass Term extends SQLObject {\n  constructor(term) {\n    super();\n    this.term = term;\n  }\n\n  toString() {\n    return '`' + this.term.replace(...commonReplacer).replace(/`/g, '\\\\`') + '`';\n  }\n}\n\nfunction quoteVal(value) {\n  return value instanceof SQLObject ? value : new Value(value);\n}\n\nfunction quoteTerm(term) {\n  return term instanceof SQLObject || Number.isFinite(term) ? term : new Term(term);\n}\n\n\nclass SQLFunction extends SQLObject {\n  constructor(name, ...args) {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  toString() {\n    return this.name +\n      \"(\" +\n      this.args.map((arg) => arg instanceof SQLObject || Number.isFinite(arg) ? arg : quoteTerm(arg)).join() +\n      \")\";\n  }\n}\n\nconst _curry_f = (name) => {\n  return (...args) => new SQLFunction(name, ...args)\n};\n\nconst AggregateFunctions = {\n  count: _curry_f('count'),\n  any: _curry_f('any'),\n  anyLast: _curry_f('anyLast'),\n  min: _curry_f('min'),\n  max: _curry_f('max'),\n  sum: _curry_f('sum'),\n  avg: _curry_f('avg'),\n  uniq: _curry_f('uniq'),\n  uniqCombined: _curry_f('uniqCombined'),\n  uniqHLL12: _curry_f('uniqHLL12'),\n  uniqExact: _curry_f('uniqExect'),\n  groupArray: _curry_f('groupArray'),\n  groupUniqArray: _curry_f('groupUniqArray')\n};\n\nconst ArithmeticFunctions = {\n  plus: _curry_f('plus'),\n  minus: _curry_f('minus'),\n  multiply: _curry_f('multiply'),\n  divide: _curry_f('divide'),\n  intDiv: _curry_f('intDiv'),\n  intDivOrZero: _curry_f('intDivOrZero'),\n  modulo: _curry_f('modulo'),\n  negate: _curry_f('negate'),\n  abs: _curry_f('abs')\n};\n\nconst TimeFunctions = {\n  toYear: _curry_f('toYear'),\n  toMonth: _curry_f('toMonth'),\n  toDayOfMonth: _curry_f('toDayOfMonth'),\n  toDayOfWeek: _curry_f('toDayOfWeek'),\n  toHour: _curry_f('toHour'),\n  toMinute: _curry_f('toMinute'),\n  toTime: _curry_f('toTime'),\n\n  toStartOfDay: _curry_f('toStartOfDay'),\n  toStartOfMonth: _curry_f('toStartOfMonth'),\n  toStartOfQuarter: _curry_f('toStartOfQuarter'),\n  toStartOfYear: _curry_f('toStartOfYear'),\n  toStartOfMinute: _curry_f('toStartOfMinute'),\n  toStartOfFiveMinute: _curry_f('toStartOfFiveMinute'),\n  toStartOfHour: _curry_f('toStartOfHour'),\n\n  now: _curry_f('now'),\n  today: _curry_f('today'),\n  yesterday: _curry_f('yesterday')\n};\n\nclass Raw extends SQLObject {\n  constructor(string) {\n    super();\n    this.raw = string;\n  }\n\n  toString() {\n    return this.raw;\n  }\n}\n\nclass Query extends SQLObject {\n}\n\n\nclass Select extends Query {\n  constructor() {\n    super();\n\n    this.tables = [];\n    this.conditions = new Conjunction();\n    this.having_conditions = new Conjunction();\n    this.preconditions = new Conjunction();\n    this.aggregations = [];\n    this.select_list = [];\n    this.order_expressions = [];\n    this.request_totals = [];\n    this.sampling = undefined;\n    this.limits = undefined;\n    this.limitbycolumns = undefined;\n\n  }\n\n  select(...columns) {\n    if (columns.length === 0) {\n      return this.select_list;\n    }\n\n    columns.forEach((col) => this.select_list.push(col));\n    return this;\n  }\n\n  /**\n   * @usage\n   *  q = selectBuilder->from('table0')->from(['table1', 'alias1'])->from({ 'table2' : 'alias2'})->toString()\n   *  assertEquals(q, \"select * from table0, table1 as alias1, table2 as alias2\");\n   *\n   * @param tables\n   * @return {Select|Array}\n   */\n  from(...tables) {\n    if (!tables.length) {\n      return this.tables;\n    }\n\n    tables = tables.map(table => {\n      if (typeof table === \"string\") return [table, table];\n      if (Array.isArray(table)) return table;\n      return [Object.keys(table)[0], Object.values(table)[1]]\n    });\n\n    this.tables = tables;\n    return this;\n  }\n\n  prewhere(...args) {\n    this.preconditions.push(createCondition(...args));\n    return this;\n  }\n\n  orPrewhere(...args) {\n    let condition = createCondition(...args);\n    if (this.preconditions.length) {\n      this.preconditions = new Disjunction(this.preconditions, condition)\n    } else {\n      this.preconditions.push(condition)\n    }\n\n    return this;\n  }\n\n  where(...args) {\n    this.conditions.push(createCondition(...args));\n    return this;\n  }\n\n  orWhere(...args) {\n    let condition = createCondition(condition, operator, value);\n    if (this.conditions.length) {\n      this.conditions = new Disjunction(this.conditions, condition)\n    } else {\n      this.conditions.push(condition);\n    }\n\n    return this;\n  }\n\n  groupBy(...aggregateExpressions) {\n    aggregateExpressions.forEach(a => this.aggregations.push(a));\n    return this;\n  }\n\n  withTotals() {\n    this.request_totals = true;\n    return this;\n  }\n\n  limit(number, offset) {\n    this.limits = {\n      number, offset\n    };\n    return this;\n  }\n\n  limitBy(limit, ...columns) {\n    this.limitbycolumns = {\n      limit, columns\n    };\n    return this;\n  }\n\n  orderBy(...expressions) {\n    expressions.forEach(e => this.order_expressions.push(e));\n    return this;\n  }\n\n  toString() {\n    let select_list;\n    if (this.select_list.length === 0) {\n      select_list = \"*\";\n    } else {\n      select_list = this.select_list.map(\n        c => Array.isArray(c)\n          ? quoteTerm(c[0]) + ' as ' + quoteTerm(c[1])\n          : quoteTerm(c)\n      ).join();\n    }\n\n\n    let from = this.from().map(\n      (table) =>\n        table[0] === table[1]\n          ? quoteTerm(table[0])\n          : quoteTerm(table[0]) + ' as ' + quoteTerm(table[1])\n    );\n    from = from.length ? \"from \" + from.join() : \"\";\n\n\n    let prewhere = this.preconditions.length ? \" prewhere \" + this.preconditions : \"\";\n    let where = this.conditions.length ? \" where \" + this.conditions : \"\";\n\n    let groupby = this.aggregations.length\n      ? \" group by \" + this.aggregations.map(c => quoteTerm(c)).join()\n      : \"\";\n\n    let having = this.having_conditions.length ? \" having \" + this.having_conditions : \"\";\n\n    let order_by = this.order_expressions.length\n      ? \"order by \" + this.order_expressions.map(e => Array.isArray(e) ? quoteTerm(e[0]) + \" \" + e[1] : quoteTerm(e)).join()\n      : \"\";\n\n\n    let with_totals = this.request_totals ? \" with totals \" : \"\";\n    let sample = this.sampling ? \" sample \" + this.sampling : \"\";\n\n    let limitby = this.limitbycolumns && this.limitbycolumns.columns.length\n      ? \" limit \" + this.limitbycolumns.limit + \" by \" + this.limitbycolumns.columns.map(c => quoteTerm(c)).join()\n      : '';\n\n    let limit = this.limits\n      ? \" limit \" + this.limits.number + (typeof this.limits.offset === \"undefined\" ? \"\" : \",\" + this.limits.offset)\n      : '';\n\n    return [\n      \"select \",\n      select_list,\n      from,\n      sample,\n      prewhere,\n      where,\n      groupby,\n      with_totals,\n      having,\n      order_by,\n      limitby,\n      limit\n    ].join(' ');\n\n  }\n}\n\n\nconst Queries = {\n  Select\n};\n\nconst Utility = {\n  quoteVal, val: quoteVal,\n  quoteTerm, term: quoteTerm,\n  raw: (s) => new Raw(s),\n\n};\n\n\nconst Dialect = {\n  ...Operators,\n  ...AggregateFunctions,\n  ...ArithmeticFunctions,\n  ...TimeFunctions,\n  ...Consts,\n  ...Queries,\n  ...Utility\n};\nexport default Dialect;\n"]}